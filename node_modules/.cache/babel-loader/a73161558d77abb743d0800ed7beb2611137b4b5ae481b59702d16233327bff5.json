{"ast":null,"code":"var _jsxFileName = \"/Users/jimena/Downloads/Telegram Desktop/forum/src/Forum/PostComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostComponent = ({\n  post\n}) => {\n  _s();\n  const [likes, setLikes] = useState(0);\n  const [comments, setComments] = useState([]); // State to store comments\n  const [commentText, setCommentText] = useState(''); // State to store new comment text\n  const [imageSrc, setImageSrc] = useState(null);\n  useEffect(() => {\n    // Fetch the image using the filename and filepath from the post\n    if (post.filename && post.filepath) {\n      axios.get(`${process.env.REACT_APP_API_URL}/${post.filepath}/${post.filename}`, {\n        responseType: 'blob'\n      }).then(response => {\n        const imageUrl = URL.createObjectURL(response.data);\n        setImageSrc(imageUrl);\n      }).catch(error => {\n        console.error('Error fetching image:', error);\n      });\n    }\n  }, [post.filename, post.filepath]);\n  const handleLike = () => {\n    setLikes(likes + 1);\n  };\n\n  // Function to handle comment submission\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    if (commentText.trim()) {\n      // Add the new comment to the comments state\n      setComments([...comments, commentText]);\n      setCommentText(''); // Clear the comment text input\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-comments\",\n      children: [comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Add a comment\",\n          value: commentText,\n          onChange: e => setCommentText(e.target.value),\n          className: \"comment-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"comment-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(PostComponent, \"zMR0ipcCJVK+3Kpa+87NVFASSNw=\");\n_c = PostComponent;\nexport default PostComponent;\nvar _c;\n$RefreshReg$(_c, \"PostComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PostComponent","post","_s","likes","setLikes","comments","setComments","commentText","setCommentText","imageSrc","setImageSrc","filename","filepath","get","process","env","REACT_APP_API_URL","responseType","then","response","imageUrl","URL","createObjectURL","data","catch","error","console","handleLike","handleCommentSubmit","e","preventDefault","trim","className","children","map","comment","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/jimena/Downloads/Telegram Desktop/forum/src/Forum/PostComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst PostComponent = ({ post }) => {\n  const [likes, setLikes] = useState(0);\n  const [comments, setComments] = useState([]); // State to store comments\n  const [commentText, setCommentText] = useState(''); // State to store new comment text\n  const [imageSrc, setImageSrc] = useState(null);\n\n  useEffect(() => {\n    // Fetch the image using the filename and filepath from the post\n    if (post.filename && post.filepath) {\n      axios\n        .get(`${process.env.REACT_APP_API_URL}/${post.filepath}/${post.filename}`, {\n          responseType: 'blob',\n        })\n        .then((response) => {\n          const imageUrl = URL.createObjectURL(response.data);\n          setImageSrc(imageUrl);\n        })\n        .catch((error) => {\n          console.error('Error fetching image:', error);\n        });\n    }\n  }, [post.filename, post.filepath]);\n\n  const handleLike = () => {\n    setLikes(likes + 1);\n  };\n\n  // Function to handle comment submission\n  const handleCommentSubmit = (e) => {\n    e.preventDefault();\n    if (commentText.trim()) {\n      // Add the new comment to the comments state\n      setComments([...comments, commentText]);\n      setCommentText(''); // Clear the comment text input\n    }\n  };\n\n  return (\n    <div className=\"post-container\">\n      {/* ... (existing JSX code) */}\n      \n      <div className=\"post-comments\">\n        {comments.map((comment, index) => (\n          <p key={index}>{comment}</p>\n        ))}\n        <form onSubmit={handleCommentSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Add a comment\"\n            value={commentText}\n            onChange={(e) => setCommentText(e.target.value)}\n            className=\"comment-input\"\n          />\n          <button type=\"submit\" className=\"comment-button\">\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PostComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}